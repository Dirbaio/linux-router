table ip router {
	chain INPUT {
		type filter hook input priority filter
        policy drop

		ct state established,related accept
		iifname "lo" accept
		ct state invalid drop
		icmp type echo-request ct state new accept

		ip protocol udp ct state new jump input-udp
		tcp flags & (fin | syn | rst | ack) == syn ct state new jump input-tcp

		ip protocol udp reject
		ip protocol tcp reject with tcp reset
		reject with icmp type prot-unreachable
	}

	chain FORWARD {
		type filter hook forward priority filter
        policy drop

		tcp flags & (syn | rst) == syn tcp option maxseg size set 1400
		ct state established,related accept

		jump fw-srccheck
		jump fw-ports
		jump fw-allowed

		reject with icmp type host-unreachable
	}

	chain PREROUTING {
		type nat hook prerouting priority dstnat

        !for network in config.networks
            ip saddr {{ network.ip }}/{{ network.range }} tcp dport 53 redirect
            ip saddr {{ network.ip }}/{{ network.range }} udp dport 53 redirect
        !endfor

        !for public_if in config.public_interfaces
		    iifname "{{ public_if }}" jump nat-ports
        !endfor

        !for network in config.networks
            !if network.nat
                ip saddr {{ network.ip }}/{{ network.range }} ip daddr {{ config.public_ip }} jump nat-ports
            !endif
        !endfor
	}

	chain POSTROUTING {
		type nat hook postrouting priority srcnat

        !for network in config.networks
            !if network.nat
                !for public_if in config.public_interfaces
                    oifname "{{ public_if }}" ip saddr {{ network.ip }}/{{ network.range }} masquerade
                !endfor
            !endif
        !endfor

        !for network in config.networks
            !for host in network.hosts
                !for port in host.ports
		            ip saddr {{ network.ip }}/{{ network.range }} ip daddr {{ host.ip }} {{ port.proto }} dport {{ port.dest }} snat to {{ network.ip }}
                !endfor
            !endfor
        !endfor
	}

	chain nat-ports {
        !for network in config.networks
            !for host in network.hosts
                !for port in host.ports
		            {{ port.proto }} dport {{ port.source }} dnat to {{ host.ip }}:{{ port.dest }}
                !endfor
            !endfor
        !endfor
	}

	chain input-tcp {
		tcp dport 22 accept
		tcp dport 80 accept
		tcp dport 443 accept

        ip saddr 10.0.0.0/8 tcp dport 53 accept
	}

	chain input-udp {
        ip saddr 10.0.0.0/8 udp dport 53 accept
        !for network in config.networks
            iifname "{{ network.interface }}" udp dport 67 accept
        !endfor
	}

	chain fw-srccheck {
        !for network in config.networks
            !if network.nat
                iifname "{{ network.interface }}" ip saddr != {{ network.ip }}/{{ network.range }} drop
            !endif
        !endfor
	}

	chain fw-ports {
        !for network in config.networks
            !for host in network.hosts
                !for port in host.ports
                    ip daddr {{ host.ip }} {{ port.proto }} dport {{ port.dest }} accept
                !endfor
            !endfor
        !endfor
	}

	chain fw-allowed {
        !for network in config.networks
            ip saddr {{ network.ip }}/{{ network.range }} ip daddr {{ network.ip }}/{{ network.range }} accept
            !if network.internet_access
                !for public_if in config.public_interfaces
                    oifname "{{ public_if }}" ip saddr {{ network.ip }}/{{ network.range }} accept
                !endfor
            !endif
        !endfor
    }
}
